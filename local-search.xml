<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS样式（pink第三天）</title>
    <link href="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/"/>
    <url>/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="css第一天总结"><a href="#css第一天总结" class="headerlink" title="css第一天总结"></a>css第一天总结</h2><h3 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h3><pre><code class="hljs">CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.有时我们也会称之为 CSS 样式表或级联样式表。CSS 是也是一种标记语言CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即 结构 ( HTML ) 与样式( CSS ) 相分离</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E5%B0%8F%E9%B8%9F.png"></p><h3 id="css语法规范"><a href="#css语法规范" class="headerlink" title="css语法规范"></a>css语法规范</h3><pre><code class="hljs">1.使用 HTML 时，需要遵从一定的规范，CSS 也是如此。要想熟练地使用 CSS 对网页进行修饰，首先需要了解CSS 样式规则。2.CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png"></p><ul><li>1.选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式</li><li>2.属性和属性值以“键值对”的形式出现</li><li>3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>4.属性和属性值之间用英文“:”分开</li><li>5.多个“键值对”之间用英文“;”进行区分<br> 例如：<br> 所有的样式，都包含在 <code>&lt;style&gt;</code> 标签内，表示是样式表。<style> 一般写到 </head> 上方 <head>     <style>         h4 {             color: blue;             font-size: 100px;         }     </style> </li></ul><h3 id="css代码风格："><a href="#css代码风格：" class="headerlink" title="css代码风格："></a>css代码风格：</h3><pre><code class="hljs">1. 样式格式书写    1.紧凑格式           h3 &#123; color: deeppink;font-size: 20px;&#125;    2.展开格式        h3 &#123;        color: pink;        font-size: 20px;         &#125;强烈推荐第二种格式， 因为更直观。2. 样式大小写风格    1.小写格式        h3 &#123;            color: pink;        &#125;    2.大写格式         H3 &#123;            COLOR: PINK;           &#125;强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母，特殊情况除外。3. 样式空格风格    1. h3 &#123;        color: pink;        &#125;属性值前面，冒号后面，保留一个空格选择器（标签）和大括号中间保留空格</code></pre><h3 id="css选择器的作用"><a href="#css选择器的作用" class="headerlink" title="css选择器的作用"></a>css选择器的作用</h3><pre><code class="hljs">答：选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。  简单来说，就是选择标签用的。</code></pre><p>​    <img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/css%E5%B1%9E%E6%80%A7%E8%A7%84%E5%88%99.png"><br>    找到所有的 h1 标签。  选择器（选对人）<br>    设置这些标签的样式，比如颜色为红色（做对事）。</p><h2 id="css基础选择器"><a href="#css基础选择器" class="headerlink" title="css基础选择器"></a>css基础选择器</h2><p>基础选择器又包括：1.标签选择器、2.类选择器、3.id 选择器和4.通配符选择器</p><h3 id="标签选择器："><a href="#标签选择器：" class="headerlink" title="标签选择器："></a>标签选择器：</h3><pre><code class="hljs">标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</code></pre><p>语法：<br>    标签选择器{<br>        属性：属性值<br>        …<br>    }<br>作用：<br>    标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><pre><code class="hljs">如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器.语法：    .类名 &#123;        属性1: 属性值1;          ...    &#125; 结构需要用class属性来调用  class  类的意思</code></pre><p><code>&lt;div class=&quot;类名&quot;&gt;</code> 变红色 <code>&lt;/div&gt;</code><br>    1.如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。<br>    2.类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。<br>    3.类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。<br>    4.可以理解为给这个标签起了一个名字，来表示。<br>    5.长名称或词组可以使用中横线来为选择器命名。<br>    6.不要使用纯数字、中文等命名，尽量使用英文字母来表示。<br>    7.命名要有意义，尽量使别人一眼就知道这个类名的目的。<br>    8.命名规范：见附件（ Web 前端开发规范手册.doc）</p><h3 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h3><pre><code class="hljs">我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签.简单理解就是一个标签有多个名字. </code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E6%B7%98%E5%AE%9D%E7%BD%91%E5%A4%9A%E7%B1%BB%E5%90%8D.png"><br>    多类名的具体使用：<br>        1. <div class="red font20">亚瑟</div><br>    注意：<br>        1.在标签class 属性中写 多个类名<br>        2.多个类名中间必须用空格分开<br>        3.这个标签就可以分别具有这些类名的样式</p><h3 id="id选择器："><a href="#id选择器：" class="headerlink" title="id选择器："></a>id选择器：</h3><pre><code class="hljs">id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#&quot; 来定义。语法：     #id名 &#123;        属性1: 属性值1;          ...    &#125;     注意：id 属性只能在每个 HTML 文档中出现一次</code></pre><h3 id="id选择器和类选择器的区别："><a href="#id选择器和类选择器的区别：" class="headerlink" title="id选择器和类选择器的区别："></a>id选择器和类选择器的区别：</h3><pre><code class="hljs">1.类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。2.id 选择器好比人的身份证号码，全中国是唯一的，不得重复。3.id 选择器和类选择器最大的不同在于使用次数上。4.类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/id%E4%B8%8E%E7%B1%BB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><h3 id="通配符选择器："><a href="#通配符选择器：" class="headerlink" title="通配符选择器："></a>通配符选择器：</h3><pre><code class="hljs">语法：    * &#123;        属性1: 属性值1;          ...    &#125;通配符选择器不需要调用， 自动就给所有的元素使用样式特殊情况才使用，后面讲解使用场景(以下是清除所有的元素标签的内外边距,后期讲) * &#123;        margin: 0;        padding: 0;    &#125; </code></pre><h3 id="选择器总结"><a href="#选择器总结" class="headerlink" title="选择器总结"></a>选择器总结</h3><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93.png"></p><h2 id="css字体属性"><a href="#css字体属性" class="headerlink" title="css字体属性:"></a>css字体属性:</h2><h3 id="字体大小："><a href="#字体大小：" class="headerlink" title="字体大小："></a>字体大小：</h3><pre><code class="hljs">CSS 使用 font-size 属性定义字体大小。 语法： p &#123;      font-size: 20px; &#125;1.px（像素）大小是我们网页的最常用的单位2.谷歌浏览器默认的文字大小为16px3.不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小4.可以给 body 指定整个页面文字的大小</code></pre><h3 id="字体粗细："><a href="#字体粗细：" class="headerlink" title="字体粗细："></a>字体粗细：</h3><pre><code class="hljs">CSS 使用 font-weight 属性设置文本字体的粗细。</code></pre><p>语法：<br>    p {<br>        font-weight: bold;<br>    }</p><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E5%AD%97%E4%BD%93%E7%B2%97%E7%BB%86.png"></p><p>1.学会让加粗标签（比如 h 和 strong 等) 不加粗，或者其他标签加粗<br>2.实际开发时，我们更喜欢用数字表示粗细</p><h3 id="字体样式："><a href="#字体样式：" class="headerlink" title="字体样式："></a>字体样式：</h3><pre><code class="hljs">CSS 使用 font-style 属性设置文本的风格。语法：p &#123;      font-style: normal;&#125;</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C.png"></p><h3 id="字体的综合写法"><a href="#字体的综合写法" class="headerlink" title="字体的综合写法"></a>字体的综合写法</h3><p>字体属性可以把以上文字样式综合来写, 这样可以更节约代码:</p><p> body {   font: font-style  font-weight  font-size&#x2F;line-height  font-family;}</p><p>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开 不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</p><h3 id="字体总结："><a href="#字体总结：" class="headerlink" title="字体总结："></a>字体总结：</h3><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E5%AD%97%E4%BD%93%E6%80%BB%E7%BB%93.png"></p><h2 id="css文本属性："><a href="#css文本属性：" class="headerlink" title="css文本属性："></a>css文本属性：</h2><h3 id="文本颜色："><a href="#文本颜色：" class="headerlink" title="文本颜色："></a>文本颜色：</h3><pre><code class="hljs">color 属性用于定义文本的颜色。</code></pre><p>语法：<br>    div {<br>        color: red;<br>    }</p><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E9%A2%9C%E8%89%B2%E5%80%BC.png"></p><p>开发中最常用的是十六进制<br>###文本对齐：<br>text-align 属性用于设置元素内文本内容的水平对齐方式。<br>语法：<br>    div {<br>        text-align: center;<br>    }</p><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E5%AF%B9%E9%BD%90%E6%96%87%E6%9C%AC.png"></p><h3 id="修饰文本："><a href="#修饰文本：" class="headerlink" title="修饰文本："></a>修饰文本：</h3><pre><code class="hljs">语法： div &#123;     text-decoration：underline； &#125;</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E4%BF%AE%E9%A5%B0%E6%96%87%E6%9C%AC.png"></p><p>重点记住如何添加下划线 ? 如何删除下划线 ? 其余了解即可.</p><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><pre><code class="hljs">语法：div &#123;     text-indent：20px；&#125;div &#123;     text-indent：2em；&#125;</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E6%96%87%E6%9C%AC%E7%BC%A9%E8%BF%9B.png"></p><pre><code class="hljs">em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</code></pre><p>###行间距：<br>    line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离<br>语法：<br>    p {<br>        line-height: 26px;<br>    }<br>    行高的文本分为 上间距  文本高度 下间距 &#x3D; 行间距</p><h2 id="css样式表："><a href="#css样式表：" class="headerlink" title="css样式表："></a>css样式表：</h2><pre><code class="hljs">按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： </code></pre><p>###行内样式表（行内式）<br>        行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式.<br>        语法：<br>            <div style="color: red; font-size: 12px;">青春不常在，抓紧谈恋爱</div><br>        <code>&lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;</code>青春不常在，抓紧谈恋爱<code>&lt;/div&gt;</code><br>        1.style 其实就是标签的属性<br>        在双引号中间，写法要符合 CSS 规范<br>        2.可以控制当前的标签设置样式<br>        3.由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用<br>        4.使用行内样式表设定 CSS，通常也被称为行内式引入</p><h3 id="内部样式表（嵌入式）"><a href="#内部样式表（嵌入式）" class="headerlink" title="内部样式表（嵌入式）"></a>内部样式表（嵌入式）</h3><pre><code class="hljs">    内部样式表（内嵌样式表）是写到html页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 &lt;style&gt; 标签中    语法：        &lt;style&gt;            div &#123;            color: red;            font-size: 12px;            &#125;        &lt;/style&gt;    1.&lt;style&gt; 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的&lt;head&gt;标签中    2.通过此种方式，可以方便控制当前整个页面中的元素样式设置    3.代码结构清晰，但是并没有实现结构与样式完全分离    4.使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</code></pre><h3 id="外部样式表（链接式）"><a href="#外部样式表（链接式）" class="headerlink" title="外部样式表（链接式）"></a>外部样式表（链接式）</h3><pre><code class="hljs">实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入到 HTML 页面中使用.引入外部样式表分为两步：1. 新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。2. 在 HTML 页面中，使用&lt;link&gt; 标签引入这个文件。语法：    &lt;link rel=&quot;stylesheet&quot;  href=&quot;css文件路径&quot;&gt;</code></pre><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/css%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93.png"></p><h2 id="Chrome调试工具："><a href="#Chrome调试工具：" class="headerlink" title="Chrome调试工具："></a>Chrome调试工具：</h2><p><img src="/2023/07/23/CSS%E6%A0%B7%E5%BC%8F%EF%BC%88pink%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/%E8%B0%B7%E6%AD%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7.png"></p><p> 1.Ctrl+滚轮 可以放大开发者工具代码大小。<br> 2.左边是 HTML 元素结构，右边是 CSS 样式。<br> 3.右边 CSS 样式可以改动数值（左右箭头或者直接输入）和查看颜色。<br> 4.Ctrl + 0 复原浏览器大小。<br> 5.如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误。<br> 6.如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>pink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html5基础（pink基础第二天）</title>
    <link href="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/07/22/Html5%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格的主要作用"><a href="#表格的主要作用" class="headerlink" title="表格的主要作用"></a>表格的主要作用</h3><pre><code class="hljs">1.表格主要用于显示、展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。一个清爽简约的表格能够把繁杂的数据表现得很有条理2.表格不是用来布局页面的,而是用来展示数据的。</code></pre><p>​    <img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E6%A0%BC1.png"><br>    3.表格的具体用法：</p><pre><code class="hljs">     &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;单元格内的文字&lt;/td&gt;            ...        &lt;/tr&gt;        ...    &lt;/table&gt;    1.&lt;table&gt; &lt;/table&gt; 是用于定义表格的标签。    2.&lt;tr&gt; &lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;table&gt; &lt;/table&gt;标签中。    3.&lt;td&gt; &lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。    4.字母 td 指表格数据（table data），即数据单元格的内容。    5.表头单元格也是单元格，常用于表格第一行突出重要性，表头单元格里面的文字会加粗居中</code></pre><h3 id="表头单元格标签："><a href="#表头单元格标签：" class="headerlink" title="表头单元格标签："></a>表头单元格标签：</h3><pre><code class="hljs">    表头标签的具体实现：     &lt;table&gt;        &lt;tr&gt;            &lt;th&gt;姓名&lt;/th&gt;            ...        &lt;/tr&gt;        ...    &lt;/table&gt;    1.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.        &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)    2.一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示.        &lt;th&gt; 标签表示 HTML 表格的表头部分(table head 的缩写)</code></pre><h3 id="表格属性："><a href="#表格属性：" class="headerlink" title="表格属性："></a>表格属性：</h3><pre><code class="hljs">1.表格标签这部分属性我们实际开发我们不常用，后面通过 CSS 来设置.</code></pre><p>​        <img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.png"><br>    完成下面综合案例：</p><p>​    <img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E6%A0%BC%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B.png"></p><p>​    <strong>思路：</strong></p><p><strong>先制作表格的结构.</strong>  </p><p>1.第一行里面是 th 表头单元格</p><p>2.第二行开始里面是 td 普通单元格单元格里面可以放任何元素</p><p>3.文字链接图片等都可以</p><p><strong>后书写表格属性</strong></p><p>1.用到宽度高度边框cellpadding 和 cellspacing</p><p>2.表格浏览器中对齐 align   </p><h3 id="表格结构标签："><a href="#表格结构标签：" class="headerlink" title="表格结构标签："></a>表格结构标签：</h3><pre><code class="hljs">使用场景:    因为表格可能很长,为了更好的表示表格的语义，可以将表格分割成 表格头部和表格主体两大部分.在表格标签中，分别用：&lt;thead&gt;标签 表格的头部区域、&lt;tbody&gt;标签 表格的主体区域. 这样可以更好的分清表格结构。</code></pre><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E6%A0%BC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE.png"></p><p><strong>总结:</strong><br>    1. &lt;thead&gt;&lt;&#x2F;thead&gt;：用于定义表格的头部。&lt;thead&gt; 内部必须拥有 &lt;tr&gt; 标签。 一般是位于第一行。<br>    2. &lt;tbody&gt;&lt;&#x2F;tbody&gt;：用于定义表格的主体，主要用于放数据本体 。<br>    3.  以上标签都是放在 &lt;table&gt;&lt;&#x2F;table&gt; 标签中。</p><h3 id="合并单元格："><a href="#合并单元格：" class="headerlink" title="合并单元格："></a>合并单元格：</h3><pre><code class="hljs">特殊情况下,可以把多个单元格合并为一个单元格,  这里同学们会最简单的合并单元格即可.1.合并单元格方式2.目标单元格3.合并单元格的步骤如下图：</code></pre><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC.png"></p><p><strong>合并单元格方式：</strong></p><p><strong>跨行合并</strong>：rowspan&#x3D;”合并单元格的个数”     </p><p>​最上侧单元格为目标单元格, 写合并代码</p><p> <strong>跨列合并</strong>：colspan&#x3D;”合并单元格的个数”</p><p>​最左侧单元格为目标单元格, 写合并代码</p><p><strong>合并单元格三步曲：</strong></p><p>先确定是跨行还是跨列合并。</p><p>找到目标单元格. 写上合并方式 &#x3D; 合并的单元格数量。</p><p>比如：<td colspan="“2”"></td>。删除多余的单元格。</p><p><strong>表格总结</strong></p><p>​表格学习整体可以分为三大部分:</p><p><strong>表格的相关标签</strong></p><p>​table   thead  body  tr  th  td </p><p><strong>表格的相关属性</strong></p><p>​cellspacing    cellpadding     width  height  border </p><p><strong>合并单元格</strong></p><p>​  rowspan   collspan</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre><code class="hljs">表格是用来显示数据的，那么列表就是用来布局的。 列表最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。根据使用情景不同，列表可以分为三大类：无序列表、有序列表和自定义列表。</code></pre><h3 id="无序："><a href="#无序：" class="headerlink" title="无序："></a>无序：</h3><p>​<img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E6%97%A0%E5%BA%8F.png"></p><p><code>&lt;ul&gt;</code> 标签表示 HTML 页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用 <code>&lt;li&gt;</code>标签定义。无序列表的基本语法格式如下：</p><pre><code class="hljs">&lt;ul&gt;     &lt;li&gt;列表项1&lt;/li&gt;       &lt;li&gt;列表项2&lt;/li&gt;       &lt;li&gt;列表项3&lt;/li&gt;       ... &lt;/ul&gt;</code></pre><ol><li>无序列表的各个列表项之间没有顺序级别之分，是并列的。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code> 中只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code>，直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code> 标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;</code> 与 <code>&lt;/li&gt;</code> 之间相当于一个容器，可以容纳<strong>所有元素</strong>。</li><li>无序列表会带有自己的样式属性，但在实际使用时，我们会使用 CSS 来设置。</li></ol><h3 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h3><p>​<img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E6%9C%89%E5%BA%8F.png"></p><p>有序列表即为有排列顺序的列表，其各个列表项会按照一定的顺序排列定义。在 HTML 标签中，   <code>&lt;ol&gt;</code> 标签用于定义有序列表，列表排序以数字来显示，并且使用 <code>&lt;li&gt;</code> 标签来定义列表项。有序列表的基本语法格式如下：</p><pre><code class="hljs">&lt;ol&gt;       &lt;li&gt;列表项1&lt;/li&gt;       &lt;li&gt;列表项2&lt;/li&gt;       &lt;li&gt;列表项3&lt;/li&gt;       ... &lt;/ol&gt;</code></pre><ol><li><code>&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;</code> 与 <code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li><li>有序列表会带有自己样式属性，但在实际使用时，我们会使用 CSS 来设置。</li></ol><h3 id="自定义："><a href="#自定义：" class="headerlink" title="自定义："></a>自定义：</h3><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%AE%9A%E4%B9%89.png"></p><p>自定义列表的使用场景:自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在 HTML 标签中，<code>&lt;dl&gt;</code> 标签用于定义描述列表（或定义列表），该标签会与 <code>&lt;dt&gt;</code>（定义项目&#x2F;名字）和 <code>&lt;dd&gt;</code>（描述每一个项目&#x2F;名字）一起使用。语法如下：</p><pre><code class="hljs">&lt;dl&gt;       &lt;dt&gt;名词1&lt;/dt&gt;       &lt;dd&gt;名词1解释1&lt;/dd&gt;       &lt;dd&gt;名词1解释2&lt;/dd&gt; &lt;/dl&gt;</code></pre><h3 id="列表总结"><a href="#列表总结" class="headerlink" title="列表总结"></a>列表总结</h3><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E5%88%97%E8%A1%A8%E6%80%BB%E7%BB%93.png"></p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>现实中的表单：<br><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E9%A1%B5%E9%9D%A2.png"></p><h3 id="为什么需要表单："><a href="#为什么需要表单：" class="headerlink" title="为什么需要表单："></a>为什么需要表单：</h3><pre><code class="hljs">使用表单目的是为了收集用户信息。在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。</code></pre><h3 id="表单的组成："><a href="#表单的组成：" class="headerlink" title="表单的组成："></a>表单的组成：</h3><pre><code class="hljs">在 HTML 中，一个完整的表单通常由表单域、表单控件（也称为表单元素）和 提示信息3个部分构成。</code></pre><h3 id="表单域："><a href="#表单域：" class="headerlink" title="表单域："></a>表单域：</h3><pre><code class="hljs">表单域是一个包含表单元素的区域。在 HTML 标签中， `&lt;form&gt;` 标签用于定义表单域，以实现用户信息的收集和传递。&lt;form&gt; 会把它范围内的表单元素信息提交给服务器.实现代码：&lt;form action=“url地址” method=“提交方式” name=“表单域名称&quot;&gt;各种表单元素控件&lt;/form&gt;</code></pre><h3 id="表单域的常用属性："><a href="#表单域的常用属性：" class="headerlink" title="表单域的常用属性："></a>表单域的常用属性：</h3><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7.png"></p><p>基础班来说,我们暂时不用表单域提交数据,只需要写上 form 标签即可.  就业班等学习服务器编程阶段会重新讲解.<br>这里只需要记住两点:<br>1.在我们写表单元素之前,应该有个表单域把他们进行包含.<br>2.表单域是 form标签.</p><h3 id="表单控件-表单元素"><a href="#表单控件-表单元素" class="headerlink" title="表单控件(表单元素)"></a>表单控件(表单元素)</h3><p> <code>&lt;input&gt;</code> 表单元素</p><p>在英文单词中，input 是输入的意思，而在表单元素中 &lt;input&gt; 标签用于收集用户信息。在 &lt;input&gt; 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p><pre><code class="hljs">&lt;input type=&quot;属性值&quot;  /&gt;</code></pre><p>&lt;input &#x2F;&gt; 标签为单标签 type 属性设置不同的属性值用来指定不同的控件类型</p><p>type 属性的属性值及其描述如下：</p><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png"></p><p>除 type 属性外，&lt;input&gt;标签还有其他很多属性，其常用属性如下：</p><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7.png"></p><h3 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt; 标签"></a><code>&lt;label&gt;</code> 标签</h3><p>&lt;label&gt; 标签为 input 元素定义标注（标签）。<br>&lt;label&gt; 标签用于绑定一个表单元素, 当点击&lt;label&gt; 标签内的文本时，浏览器就会自动将焦点(光标)转到或者选择对应的表单元素上,用来增加用户体验.<br>语法：</p><pre><code class="hljs">&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot;  id=&quot;sex&quot; /&gt;核心： &lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同。</code></pre><h3 id="lt-select-gt-表单元素"><a href="#lt-select-gt-表单元素" class="headerlink" title="&lt;select&gt; 表单元素"></a><code>&lt;select&gt;</code> 表单元素</h3><p>使用场景: 在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，我们可以使用&lt;select&gt;标签控件定义下拉列表。</p><p><img src="/2023/07/22/Html5%E5%9F%BA%E7%A1%80/%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8.png"></p><p>语法：</p><pre><code class="hljs">&lt;select&gt;    &lt;option&gt;选项1&lt;/option&gt;    &lt;option&gt;选项2&lt;/option&gt;    &lt;option&gt;选项3&lt;/option&gt;    ...&lt;/select&gt;</code></pre><h3 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt; 表单元素"></a><code>&lt;textarea&gt;</code> 表单元素</h3><ol><li>使用场景: 当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用 &lt;textarea&gt; 标签。</li><li>在表单元素中，&lt;textarea&gt; 标签是用于定义多行文本输入的控件。</li><li>使用多行文本输入控件，可以输入更多的文字，该控件常见于留言板，评论。</li></ol><p>语法:</p><p>​    <code>&lt;textarea rows=&quot;3&quot; cols=&quot;20&quot;&gt;</code>   文本内容 <code>&lt;/textarea&gt;</code></p><p>通过 &lt;textarea&gt; 标签可以轻松地创建多行文本输入框。<br>    cols&#x3D;“每行中的字符数” ，<br>    rows&#x3D;“显示的行数”，</p><p>我们在实际开发中不会使用，都是用 CSS 来改变大小。</p><p>表单元素我们学习了三大组  input 输入表单元素  select 下拉表单元素  textarea 文本域表单元素.这三组表单元素都应该包含在form表单域里面,并且有 name 属性.</p><p>具体代码：</p><pre><code class="hljs">​&lt;form&gt;​&lt;input type=“text &quot; name=“username”&gt;​&lt;select name=“jiguan”&gt;  ​ &lt;option&gt;北京&lt;/option&gt;​&lt;/select&gt; ​&lt;textarea name= &quot;message&quot;&gt;​&lt;/textarea&gt;​&lt;/form&gt;</code></pre><p>有三个名字非常相似的标签:</p><ul><li>表单域   form    使用场景:  提交区域内表单元素给后台服务器文件域   </li><li>file      是input type 属性值   使用场景: 上传文件文本域   </li><li>textarea    使用场景:  可以输入多行文字, 比如留言板  网站介绍等…</li></ul><ol start="4"><li>我们当前阶段不需要提交表单元素,所以我们只负责表单元素的外观形态即可.</li></ol><h3 id="完成综合案例"><a href="#完成综合案例" class="headerlink" title="完成综合案例"></a>完成综合案例</h3><h3 id="查阅文档："><a href="#查阅文档：" class="headerlink" title="查阅文档："></a>查阅文档：</h3><pre><code class="hljs">经常查阅文档是一个非常好的学习习惯。推荐的网址： 百度:  http://www.baidu.comW3C :  http://www.w3school.com.cn/MDN: https://developer.mozilla.org/zh-CN/</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Html5</tag>
      
      <tag>pink第二天</tag>
      
      <tag>table</tag>
      
      <tag>列表</tag>
      
      <tag>合并单元格</tag>
      
      <tag>pink学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html中空格的写法</title>
    <link href="/2023/07/17/html%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <url>/2023/07/17/html%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="方法1：使用键盘，键入空格"><a href="#方法1：使用键盘，键入空格" class="headerlink" title="方法1：使用键盘，键入空格"></a>方法1：使用键盘，键入空格</h2><p>在html页面中，我们可以通过键入“空格”键来插入空格。<br>例：在p.p1中键入一个空格，在p.p2中键入5个空格。注：此时是半角状态键入“空格”：</p><pre><code class="hljs">\&lt;p class=&quot;p1&quot;&gt;测试文字| HTML中文网！ \&lt;/p&gt; \&lt;p class=&quot;p2&quot;&gt;测试文字|     HTML中文网！\&lt;/p&gt;</code></pre><p>效果图：<br><img src="/2023/07/17/html%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%86%99%E6%B3%95/image.png" alt="Alt text"><br>在这里插入图片描述<br>可以看出，无论我们在HTML中是键入1个空格或者5个空格，还是其他多个空格，Web浏览器都会自动将这些空格折叠为仅一个空格。<br>那么我们如何显示多个键入的空格？可以通过在全角状态键入“空格”键，例：</p><pre><code class="hljs">&lt;p class=&quot;p1&quot;&gt;测试文字|　HTML中文网！&lt;/p&gt;  &lt;p class=&quot;p2&quot;&gt;测试文字|　　　　　　HTML中文网！&lt;/p&gt;</code></pre><p>效果图：<br><img src="/2023/07/17/html%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%86%99%E6%B3%95/image-1.png" alt="Alt text"><br>在这里插入图片描述<br>说明：全角空格会被解释为汉字，以空白汉字的形式显示，且是实数显示（有多少就显示多少）。</p><h2 id="方法2：使用html的空格符"><a href="#方法2：使用html的空格符" class="headerlink" title="方法2：使用html的空格符"></a>方法2：使用html的空格符</h2><p>我们可以使用html中表示空格的字符实体来在html页面中插入空格，下面我们来看看在html中表示空格的字符实体有哪些：</p><pre><code class="hljs">&amp;nbsp;字符：不断行的空白格，该空格占据的宽度受字体影响(一个字符宽度)。&amp;ensp;字符：相当全角状态键入半个“空格”键（半个汉字的宽度，一个字符宽度）。&amp;emsp;字符：相当全角状态键入“空格”键（1个汉字的宽度，两个字符宽度）。</code></pre><p>下面我们来看看效果：<br>    </p><p class="p1">测试文字|&amp;nbsp; 字符nbsp显示空格！</p>&lt;br &#x2F;<br>    <p class="p2">测试文字|&amp;ensp;字符ensp显示空格！</p><br><br>    <p class="p3">测试文字|&amp;emsp;字符emnsp显示空格！</p><br>效果图：<br><img src="/2023/07/17/html%E4%B8%AD%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%86%99%E6%B3%95/image-2.png" alt="Alt text"><br>在这里插入图片描述<br>说明：&amp;ensp和&amp;emsp字符所占据的宽度基本上不受字体影响，是相当稳健的。<p></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端基础</title>
    <link href="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="初识前端"><a href="#初识前端" class="headerlink" title="初识前端"></a><center>初识前端</center></h1><p>目标：主要是pc端网页布局</p><h2 id="HTML第一天"><a href="#HTML第一天" class="headerlink" title="HTML第一天"></a>HTML第一天</h2><h3 id="我们接下来是进行的网页开发网页的相关概念"><a href="#我们接下来是进行的网页开发网页的相关概念" class="headerlink" title="我们接下来是进行的网页开发网页的相关概念:"></a>我们接下来是进行的网页开发网页的相关概念:</h3><ul><li>什么是网页?</li><li>什么是HTML?</li><li>网页的形成?</li></ul><h2 id="什么是网页："><a href="#什么是网页：" class="headerlink" title="什么是网页："></a>什么是网页：</h2><pre><code class="hljs">1.网站是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。2.网页是网站中的一“页”，通常是 HTML 格式的文件，它要通过浏览器来阅读。</code></pre><h3 id="网页的组成："><a href="#网页的组成：" class="headerlink" title="网页的组成："></a>网页的组成：</h3><pre><code class="hljs">1.网页是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BB%84%E6%88%90.png"></p><h3 id="什么是HTML："><a href="#什么是HTML：" class="headerlink" title="什么是HTML："></a>什么是HTML：</h3><pre><code class="hljs">1.HTML 指的是超文本标记语言 (Hyper Text Markup Language) ，它是用来描述网页的一种语言。2.HTML 不是一种编程语言，而是一种标记语言 (markup language)。标记语言是一套标记标签 (markup tag)。</code></pre><h3 id="网页的总结："><a href="#网页的总结：" class="headerlink" title="网页的总结："></a>网页的总结：</h3><pre><code class="hljs">- 1.网页是图片、链接、文字、声音、视频等元素组成, 其实就是一个html文件(后缀名为html)- 2.网页生成制作:  有前端人员书写 HTML 文件, 然后浏览器打开,就能看到了网页.- 3.HTML: 超文本标记语言, 用来制作网页的一门语言. 有标签组成的. 比如 图片标签 链接标签 视频标签等…</code></pre><h3 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h3><p><strong>常用的浏览器</strong></p><ul><li>IE</li><li>火狐</li><li>谷歌</li><li>苹果</li><li>欧朋</li></ul><ul><li>浏览器是网页显示、运行的平台。常用的浏览器有 IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。平时称为五大浏览器。</li><li>查看浏览器市场份额：<a href="http://tongji.baidu.com/data/browser">http://tongji.baidu.com/data/browser</a><br>  <img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8.png"></li></ul><p><strong>浏览器内核（渲染引擎）</strong></p><ul><li>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面<br>  <img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png"></li><li>目前国内一般浏览器都会采用 Webkit&#x2F;Blink 内核，如 360、UC、QQ、搜狗等。</li></ul><h2 id="web标准："><a href="#web标准：" class="headerlink" title="web标准："></a>web标准：</h2><ul><li>Web 标准是由 W3C 组织和其他标准化组织制定的一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</li></ul><h3 id="为什么需要Web标准："><a href="#为什么需要Web标准：" class="headerlink" title="为什么需要Web标准："></a>为什么需要Web标准：</h3><ul><li><p>浏览器不同，它们显示页面或者排版就有些许差异<br>  <img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/web%E6%A0%87%E5%87%86.png"></p></li><li><p>遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有以下优点：</p><ul><li>1.让 Web 的发展前景更广阔。 </li><li>2.内容能被更广泛的设备访问。</li><li>3.更容易被搜寻引擎搜索。</li><li>4.降低网站流量费用。</li><li>5.使网站更易于维护。</li><li>6.提高页面浏览速度。</li></ul></li></ul><h2 id="web标准的构成："><a href="#web标准的构成：" class="headerlink" title="web标准的构成："></a>web标准的构成：</h2><pre><code class="hljs">主要包括 《结构Structure》 、《表现（Presentation）》和《行为（Behavior）》三个方面。</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%89%8745.png"></p><p>Web 标准提出的最佳体验方案：<strong>结构、样式、行为相分离</strong>。<br>简单理解：<strong>结构写到 HTML 文件中， 表现写到 CSS 文件中， 行为写到 JavaScript 文件中</strong></p><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E9%B8%9F.png"></p><p>1.结构类似身体</p><p>2.表现类似外观装饰</p><p>3.行为类似行为动作</p><p>4.相比较而言, 三者中结构最重要.</p><h2 id="HTML标签的导读："><a href="#HTML标签的导读：" class="headerlink" title="HTML标签的导读："></a>HTML标签的导读：</h2><h3 id="HTML语法规则："><a href="#HTML语法规则：" class="headerlink" title="HTML语法规则："></a>HTML语法规则：</h3><pre><code class="hljs">1.HTML 标签是由尖括号包围的关键词，例如 &lt;html&gt;。2.HTML 标签通常是成对出现的，例如 &lt;html&gt; 和 &lt;/html&gt; ，我们称为**双标签**。3.签。标签对中的第一个标签是开始标签，第二个标签是结束标签。 </code></pre><p>有些特殊的标签必须是单个标签（极少情况），例如 <br>，我们称为<strong>单标签</strong>。<br>###标签的关系：<br>    双标签关系可以分为两类：包含关系和并列关系<br>    包含标签：</p><pre><code class="hljs">    &lt;head&gt;          &lt;title&gt; &lt;/title&gt;     &lt;/head&gt;</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%A4%A7%E5%A4%B4%E5%84%BF%E5%AD%90.png"><br>    并列关系：</p><pre><code class="hljs">     &lt;head&gt; &lt;/head&gt;     &lt;body&gt; &lt;/body&gt;</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E7%86%8A%E5%A4%A7.png"> </p><h3 id="基本结构标签："><a href="#基本结构标签：" class="headerlink" title="基本结构标签："></a>基本结构标签：</h3><pre><code class="hljs">每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png"> </p><h3 id="开发工具："><a href="#开发工具：" class="headerlink" title="开发工具："></a>开发工具：</h3><p>   <img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.png"><br>   <img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%89%AA%E5%A4%B4.png"> </p><p><strong>VSCode的使用：</strong></p><ul><li>1 双击打开软件。</li><li>2 新建文件（Ctrl + N ）。</li><li>3 保存（Ctrl + S ）, 注意移动要保存为 .html 文件</li><li>4 Ctrl + 加号键 ，Ctrl + 减号键  可以放大缩小视图 </li><li>5 生成页面骨架结构。 输入! 按下 Tab 键。 </li><li>6 利用插件在浏览器中预览页面：单击鼠标右键，在弹出窗口中点击“Open In Default Browser”。<br><strong>DOCTYPE</strong><!DOCTYPE html>  文档类型声明标签,告诉浏览器这个页面采取html5版本来显示页面.<br><strong>lang 语言种类</strong><br>. 用来定义当前文档显示的语言。<br>. en定义语言为英语<br>. zh-CN定义语言为中文<br>. 简单来说,定义为en 就是英文网页, 定义为 zh-CN 就是中文网页<br>. 其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文<br>. 这个属性对浏览器和搜索引擎(百度.谷歌等)还是有作用的<br><strong>字符集</strong><br>1.字符集 (Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。<br>2.在&lt;head&gt;标签内，可以通过&lt;meta&gt; 标签的 charset 属性来规定 HTML 文档应该使用哪种字符编码。<br>3.&lt;meta charset&#x3D;” UTF-8” &#x2F;&gt;<br>4.charset 常用的值有：GB2312 、BIG5 、GBK 和 UTF-8，其中 UTF-8 也被称为万国码，基本包含了全世界所有国家需要用到的字符.<br>5.注意：上面语法是必须要写的代码，否则可能引起乱码的情况。一般情况下，统一使用“UTF-8”编码，尽量统一写成标准的 “UTF-8”，不要写成  “utf8” 或 “UTF8”。</li></ul><h3 id="语义化标签："><a href="#语义化标签：" class="headerlink" title="语义化标签："></a>语义化标签：</h3><pre><code class="hljs">学习标签是有技巧的，重点是记住每个标签的语义。简单理解就是指标签的含义，即这个标签是用来干嘛的。</code></pre><h3 id="什么是语义化标签："><a href="#什么是语义化标签：" class="headerlink" title="什么是语义化标签："></a>什么是语义化标签：</h3><pre><code class="hljs">根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。下图没有语义化标签：</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%B2%A1%E6%9C%89%E8%AF%AD%E4%B9%89.png"></p><h3 id="添加语义标签："><a href="#添加语义标签：" class="headerlink" title="添加语义标签："></a>添加语义标签：</h3><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E8%AF%AD%E4%B9%89%E5%8C%96.png"></p><h3 id="常用的标签："><a href="#常用的标签：" class="headerlink" title="常用的标签："></a>常用的标签：</h3><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><pre><code class="hljs">**标题标签 &lt;h1&gt; - &lt;h6&gt;（重要）**为了使网页更具有语义化，我们经常会在页面中用到标题标签。HTML 提供了 6 个等级的网页标题，即&lt;h1&gt; - &lt;h6&gt; 。具体实现：      &lt;h1&gt; 我是一级标题 &lt;/h1&gt;特点：1.加了标题的文字会变的加粗，字号也会依次变大。2. 一个标题独占一行。来！！！左边。。。右边。。。中间：    &lt;h1&gt;标题一共六级选,&lt;/h1&gt;    &lt;h2&gt;文字加粗一行显。&lt;/h2&gt;    &lt;h3&gt;由大到小依次减，&lt;/h3&gt;    &lt;h4&gt;从重到轻随之变。&lt;/h4&gt;    &lt;h5&gt;语法规范书写后，&lt;/h5&gt;    &lt;h6&gt;具体效果刷新见。&lt;/h6&gt;</code></pre><p>　　                ——pink老师</p><h3 id="段落标签："><a href="#段落标签：" class="headerlink" title="段落标签："></a>段落标签：</h3><pre><code class="hljs">在网页中，要把文字有条理地显示出来，就需要将这些文字分段显示。在 HTML 标签中，&lt;p&gt;标签用于定义段落，它可以将整个网页分为若干个段落。具体实现：     &lt;p&gt; 我是一个段落标签 &lt;/p&gt;特点：    1. 文本在一个段落中会根据浏览器窗口的大小自动换行。    2. 段落和段落之间保有空隙。</code></pre><h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h3><pre><code class="hljs">在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 &lt;br /&gt;。具体实现：      &lt;br /&gt;特点：    1. &lt;br /&gt; 是个单标签。    2. &lt;br /&gt; 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</code></pre><p>###文本格式化标签：<br>    在网页中，有时需要为文字设置粗体、斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使文字以特殊的方式显示。<br><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png"></p><h3 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h3><pre><code class="hljs">&lt;div&gt; 和 &lt;span&gt; 是没有语义的，它们就是一个盒子，用来装内容的。具体实现：     &lt;div&gt; 这是头部 &lt;/div&gt;         &lt;span&gt; 今日价格 &lt;/span&gt;特点：    1. &lt;div&gt; 标签用来布局，但是现在一行只能放一个&lt;div&gt;。 大盒子    2. &lt;span&gt; 标签用来布局，一行上可以多个 &lt;span&gt;。小盒子</code></pre><h3 id="图片标签："><a href="#图片标签：" class="headerlink" title="图片标签："></a>图片标签：</h3><pre><code class="hljs">在 HTML 标签中，&lt;img&gt; 标签用于定义 HTML 页面中的图像。具体实现：      &lt;img src=&quot;图像URL&quot; /&gt;解释：    src 是&lt;img&gt;标签的必须属性，它用于指定图像文件的路径和文件名。    所谓属性：简单理解就是属于这个图像标签的特性。图像标签的其他属性：</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%89%87%E5%B1%9E%E6%80%A7.png"><br>​<br>    图像标签注意点：<br>        1.图像标签可以拥有多个属性，必须写在标签名的后面。<br>        2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>        3.属性采取键值对的格式，即 key&#x3D;“value” 的格式，属性 &#x3D;“属性值”。</p><h3 id="路径："><a href="#路径：" class="headerlink" title="路径："></a>路径：</h3><pre><code class="hljs">分为相对路径和绝对路径：    **路径之相对路径**    相对路径：以引用文件所在位置为参考基础，而建立出的目录路径。     这里简单来说，图片相对于 HTML 页面的位置</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E8%B7%AF%E5%BE%84.png"><br>    特点：<br>        相对路径是从代码所在的这个文件出发，去寻找目标文件的，而我们这里所说的上一级 、下一级和同一级就是 图片相对于 HTML 页面的位置。<br>        路径之绝对路径：<br>            绝对路径：<br>            1.是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。<br>            例如，“D:\web\img\logo.gif”或完整的网络地址“<a href="http://www.itcast.cn/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/logo.gif%E2%80%9D">http://www.itcast.cn/前端基础/logo.gif”</a></p><h3 id="链接标签："><a href="#链接标签：" class="headerlink" title="链接标签："></a>链接标签：</h3><pre><code class="hljs"> 链接的语法格式    &lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt;属性：    1.href：用于指定链接目标的url地址    2.target:用于指定链接页面的打开方式_self默认值 _blank新窗口打开    3.#：空链接</code></pre><p>链接分类：<br>    1.外部链接: 例如 &lt; a href&#x3D;”http:&#x2F;&#x2F; <a href="http://www.baidu.com/">www.baidu.com</a> “&gt; 百度&lt;&#x2F;a &gt;。<br>    2.内部链接:网站内部页面之间的相互链接. 直接链接内部页面名称即可，例如 &lt; a href&#x3D;”index.html”&gt; 首页 &lt;&#x2F;a &gt;。<br>    3.空链接: 如果当时没有确定链接目标时，&lt; a href&#x3D;”#”&gt; 首页 &lt;&#x2F;a &gt; 。<br>    4.下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件。<br>    5.网页元素链接: 在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接.<br>    6.锚点链接:  点我们点击链接,可以快速定位到页面中的某个位置. </p><ul><li><pre><code class="hljs">   在链接文本的 href 属性中，设置属性值为 #名字 的形式，如&lt;a href=&quot;#two&quot;&gt; 第2集 &lt;/a&gt; </code></pre></li><li><pre><code class="hljs">   找到目标位置标签，里面添加一个 id 属性 = 刚才的名字 ，如：&lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt;</code></pre></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code class="hljs">如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</code></pre><p>HTML中的注释以&lt;!–”开头，以“ –&gt;”结束。<br>    具体实现：<br>         <!-- 注释语句 -->      快捷键: ctrl +  &#x2F;<br>    一句话: 注释标签里面的内容是给程序猿看的, 这个代码是不执行不显示到页面中的.<br>    添加注释是为了更好地解释代码的功能，便于相关开发人员理解和阅读代码，程序是不会执行注释内容的</p><h3 id="特殊字符："><a href="#特殊字符：" class="headerlink" title="特殊字符："></a>特殊字符：</h3><pre><code class="hljs">在 HTML 页面中，一些特殊的符号很难或者不方便直接使用，此时我们就可以使用下面的字符来替代。</code></pre><p><img src="/2023/07/13/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png"><br>    重点记住：空格 、大于号、 小于号 这三个， 其余的使用很少，如果需要回头查阅即可。</p>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pink</tag>
      
      <tag>html</tag>
      
      <tag>学习笔记</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Beautiful Soup 4.4.0 文档</title>
    <link href="/2023/07/11/Beautiful-Soup-4-4-0-%E6%96%87%E6%A1%A3/"/>
    <url>/2023/07/11/Beautiful-Soup-4-4-0-%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">这里粘一个链接https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id7]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bs4</tag>
      
      <tag>爬虫</tag>
      
      <tag>页面解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>text</title>
    <link href="/2023/07/06/text/"/>
    <url>/2023/07/06/text/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="使用hexo新建、编辑并预览文章"><a href="#使用hexo新建、编辑并预览文章" class="headerlink" title="使用hexo新建、编辑并预览文章"></a><center>使用hexo新建、编辑并预览文章</center></h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a><center>新建文章</center></h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><pre><code class="hljs">命令：hexo new [layout] title或 hexo n [layout] title</code></pre><p>创建文章前要先选定模板，在hexo中也叫做布局。hexo支持三种布局（layout）：post(默认)、draft、page。我们先介绍如何使用已有布局，后面还将会介绍如何自定义布局。</p><p>在博客目录下输入以下命令时，会默认使用post布局，然后自动在source_posts目录生成一个text1.md文件：</p><pre><code class="hljs">$ hexo n text1</code></pre><p>当然你还可以指定布局：</p><pre><code class="hljs">$ hexo n [layout_name] draft1</code></pre><p>该命令创建了一个使用特定布局的名为draft1的文章。</p><p>打开之前创建的text1.md文件，我们可以看到文章开头包含以下内容：</p><pre><code class="hljs">---title: text1author: luyaodate: 2020-04-10 04:13:36tags: hexocategories: blog---</code></pre><p>你显示的内容可能未必与我一样，不必担心，这是由于我自定义过。只需要知道，上面的内容在hexo被称作Front-matter，实际上就是该文章的一些变量，用于实现一些特定的功能。比如使author: luyao，那么渲染后的文章中将显示文章作者为luyao。</p><p>如何自定义布局呢？实际上，布局是一个markdown文件，它们保存在scaffolds&#x2F;目录下，可以看到hexo自带的三种布局其实就是三个.md文件：</p><p>而每一个文件中的内容实际只包含一个Front-matter。</p><p>因此，你可以在这里修改布局或者建立新的布局，然后创建文章时使用这些布局。</p><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><pre><code class="hljs">使用hexo n draft draft1命令将在source\目录下创建_drafts目录，并生成一个draft1.md文件。</code></pre><p>当你编辑完草稿后，可以把文章推送到_posts目录下，通过下面的命令：</p><pre><code class="hljs">$ hexo publish &lt;file_name&gt;</code></pre><p>可以使用hexo –draft命令可以查看已有草稿。</p><p>想要在本地预览草稿的静态文件，也需要在生成静态文件时加上draft参数。</p><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>以下将介绍一些markdown语法。由于markdown在不同平台的实现略有不用，因此下面的内容只会介绍hexo默认支持的语法（特别基础的常用语法将不再说明，例如#）。此外，由于主题不同，不同机器显示效果也有会一定差异。</p><p>以下是本人操作的环境：</p><p>编辑器：typora<br>hexo主题：cactus</p><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>图片几乎是我们写博客时不可或缺的元素。在hexo中插入图片需要先进行一些设置，不过在介绍那之前让我们先回顾一下markdown引用图片的语法：</p><pre><code class="hljs">![alt](path [title])path是必选的，表示图片的路径，可使用绝对或相对路径。alt是可选的，是图片无法加载时的替代描述文本。title是可选的，是图片的标题。</code></pre><p>在hexo中，引用图片不是简单的使用上述语法即可，你还需要为图片制定一个资源文件夹。具体来说，hexo中文章引用图片有两种方式：</p><p>将所有文章的图片放到source&#x2F;images 文件夹中（没有就自己创建一个），然后使用markdown语句引用图片。这种方法一般适用于包含少量图片的hexo项目，但是当文章数量增多，图片数也随之增加后，该管理方式就显得有些混乱。因此我个人推荐你使用下面一种方法。</p><ul><li>为每一个文章创建一个资源文件夹，将图片保存其中，具体步骤如下：</li><li>在博客根目录打开_config.yml文件做如下修改：yaml post_asset_folder: true</li><li>然后使用hexo n text命令后创建一个使用post布局名为text的文章，</li><li>你将发现hexo在\source_post文件夹下创建了一个\text文件夹以及同名的.md文件：<br><img src="/2023/07/06/text/image.png" alt="Alt text"><img src="/2023/07/06/text/image.png" alt="实验图片"></li></ul><p>最后就可以打开text.md文件进行编辑了，你可以把要引用的图片放到同名文件夹下，然后使用相对路径进行引用。注意：请不要自作聪明将text.md文件移动到同名文件夹下，经本人尝试，发现这样会导致图片无法正常引用（如果有兴趣可以试试，成功了记得下@博主）。<br>Tip：如果你使用的是Typora编辑器，可以在编辑器的文件&#x2F;偏好设置&#x2F;图像中进行如下设置：<br><img src="/2023/07/06/text/image-1.png" alt="Alt text"></p><p>这样你每次直接拷贝到文章的截图将会被自动保存到同名的文件夹下，非常方便~</p><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><pre><code class="hljs">&lt;video width=&quot;480&quot; height=&quot;320&quot; controls&gt;&lt;source src=video_path&gt;&lt;/video&gt;</code></pre><video width="480" height="320" controls>    <source src="https://www.bilibili.com/video/BV1Bj411m772/?spm_id_from=333.1007.tianma.2-3-6.click&vd_source=3e25d859b67cdcf69ec724ba23ac75fe"></video><p>video_path是视频的存储路径（含双引号），你可以把视频放在文章的同名资源文件夹下，然后用相对路径方式引用。<br>width和height是视频区块的宽度和高度，可自定义。</p><h3 id="引用区块"><a href="#引用区块" class="headerlink" title="引用区块"></a>引用区块</h3><pre><code class="hljs">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;    content...    &#123;% endblockquote %&#125;</code></pre><blockquote><p>content…</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>   <p>例如：</p><blockquote><p>Quick Start</p><footer><strong>luzhengli hello-world</strong><cite><a href="https://luzhengli.github.io/2020/04/10/hello-world/">luzhengli.github.io/2020/04/10/hello-world</a></cite></footer></blockquote><p>效果如下：<br><img src="/2023/07/06/text/image-2.png" alt="Alt text"></p><p>还有一种简单的引用语法：</p><pre><code class="hljs">&gt; 这也是引用&gt;&gt; 引用1&gt;&gt; 饮用2</code></pre><p>效果如下：<br><img src="/2023/07/06/text/image-3.png" alt="Alt text"></p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><pre><code class="hljs">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;    code snippet    &#123;% endcodeblock %&#125;</code></pre><p>上述形式写起来比较麻烦，我比较喜欢用另外一种语法：</p><p><img src="/2023/07/06/text/image-4.png" alt="Alt text"><br>例如：</p><p><img src="/2023/07/06/text/image-5.png" alt="Alt text"></p><p>效果如下：</p><p><img src="/2023/07/06/text/image-6.png" alt="Alt text"><br>hexo还提供了一些标签插件支持你引用其他资源，如视频、iframe等。不过不常用，有兴趣的朋友可以自己了解下。</p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>编写好markdown文章后接下来就需要渲染、生成静态文件，启动本地端口查看效果了。</p><pre><code class="hljs">生成/删除静态文件生成静态文件命令：hexo generate或 hexo g删除静态文件命令：hexo clean</code></pre><p>正常情况下，每次启动本地端口前只需更新静态文件即可。Hexo引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。</p><p>如果发生了一些错误，可以先删除静态文件，然后再重新生成。hexo g命令还提供了一个参数-f提供以类似效果。这样做的缺点就是当文章数变多以后渲染时间会更久一些。</p><h3 id="启动本地端口"><a href="#启动本地端口" class="headerlink" title="启动本地端口"></a>启动本地端口</h3><p>命令：hexo server或 hexo s<br>生成静态文件之后，便要启动本地端口。然后访问命令行返回的地址便能在本地访问到博客了。</p><p>效果如下：</p><p><img src="/2023/07/06/text/image-7.png" alt="Alt text"></p><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>启用主题的步骤：</p><ul><li>在GitHub上克隆你喜欢的hexo主题到本地博客的根目录的theme文件夹下：git clone <url> themes&#x2F;<theme_name></theme_name></url></li><li>修改_config.yml文件的theme字段为下载好的主题名，例如：theme: yilia</li><li>删除已有静态文件：hexo clean（为了避免可能的错误）</li><li>重新生成静态文件：hexo g</li><li>启动本地端口查看效果：hexo s</li><li>重新部署：hexo d，稍等一段时间后刷新网页，发现主题生效<br>以上只是主题的启用方法，每个主题还支持许多个性化操作，这些内容需要详见主题的文档。</li></ul><h3 id="再次部署"><a href="#再次部署" class="headerlink" title="再次部署"></a>再次部署</h3><p>命令：hexo deploy或 hexo d<br>部署之后等待一会就能通过公网访问到博客了。</p><p>踩过的坑<br>部署到github时，仓库名称没有和github账户名一致（这里需要特别小心，账户名≠name）。举例来说，在github个人主页中，小字部分luzhengli才是账户名：</p><p>部署后发现无法通过主域名访问，必须主域名+index.html才能访问。解决办法如下：<br>先查看github主目录是否有index.html<br>删掉.deploy_git文件夹<br>依次输入命令：hexo clean，hexo g，hexo d。<br>最后的大杀器：当遇到无法解决的问题时，可以直接把blog所在的博客目录删除！重新走一遍流程。</p><h3 id="Hexo如何只在首页显示文章摘要"><a href="#Hexo如何只在首页显示文章摘要" class="headerlink" title="Hexo如何只在首页显示文章摘要"></a>Hexo如何只在首页显示文章摘要</h3><p><img src="/2023/07/06/text/image_fenge.png" alt="Alt text"></p>]]></content>
    
    
    <categories>
      
      <category>hexo 博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>md</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/03/hello-world/"/>
    <url>/2023/07/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
